{-# LANGUAGE TemplateHaskell #-}

import Control.Monad
import Data.List(sort)
import Data.Default
import Control.Monad.Trans.Free
import Control.Monad.Trans.State
import Control.Lens hiding (Level)
import Types
import Generators
import Game

makeLenses ''Player
makeLenses ''Room
makeLenses ''Level
makeLenses ''GameState

-- | A simple test room
testRoom :: Room
testRoom =  rType    .~ KaliAltar 
          $ entities .~ [( (U, N, E) , Enemy' Spider ), ( (D, N, E), Player' p )] 
          $ def :: Room
  where p = holding .~ ( Just (GroundItem' PotEmpty) ) 
          $ items   .~ [ClimbingGloves] 
          $ def :: Player

gs :: GameState
gs =   levelNum .~ 0
     $ level    .~ (rooms .~ [((U, N, E), testRoom)] $ def)
     $ area     .~ Mines
     $ room     .~ testRoom
     $ def :: GameState

-- | showTIO shows user commands 
-- | while game includes the prompt
-- | and game state to be modified.
main = do
  -- | GameState will eventually be generated by a random seed
  showTIO $ evalStateT game gs
